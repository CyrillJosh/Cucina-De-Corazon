@model List<Cucina_De_Corazon.Controllers.CartController.CartItem>

@{
    ViewData["Title"] = "Your Cart";
}

<div class="container mt-5 h-100">
    <div class="card shadow border-0 rounded-4 p-4">
        <h2 class="mb-4 text-center fw-bold">Your Cart</h2>

        @if (Model.Count == 0)
        {
            <div class="alert alert-info text-center rounded-3">Your cart is empty.</div>
        }
        else
        {   
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="bg-orange text-white" style="position: sticky; top: 0; z-index: 1; border-collapse: separate; border-spacing: 0px ;border: 1px solid black; border-radius: 5px;">
                        <tr class="text-center text-white">
                            <th>Product</th>
                            <th>Pax</th>
                            <th>Price</th>
                            <th>Qty</th>
                            <th>Total</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="fw-semibold">@item.ProductName</td>
                                <td>@item.Pax</td>
                                <td>₱@item.Price.ToString("N2")</td>
                                <td>
                                    <input type="number"
                                           class="form-control qty-input text-center"
                                           min="1"
                                           value="@item.Qty"
                                           data-product-id="@item.ProductId"
                                           style="width: 80px;" />
                                </td>
                                <td>₱@item.Total.ToString("N2")</td>
                                <td>
                                    <form method="post" action="/Cart/Remove" class="d-inline remove-form">
                                        <input type="hidden" name="productId" value="@item.ProductId" />
                                        <button type="submit" class="btn btn-danger btn-sm fw-bold">Remove</button>
                                    </form>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-flex justify-content-between mt-4">
                <button class="btn btn-warning fw-bold rounded-2 px-4"
                        data-bs-toggle="modal"
                        data-bs-target="#confirmOrderModal">
                    Confirm Order
                </button>
                <form method="post" action="/Cart/Clear" id="clearCartForm">
                    <button type="submit" class="btn btn-danger fw-bold rounded-2 px-4">Clear Cart</button>
                </form>
            </div>
        }
    </div>
</div>
<div class="modal fade" id="confirmOrderModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-3">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Your Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <label class="form-label">Choose Reservation Date:</label>
                <input type="date" id="reservedDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control mb-3 bg-white" />

                <div class="mb-3">
					<label class="form-label">Type</label>
                    <select id="type" class="form-select">
                        <option value="" selected disabled>Select a type of service</option>
                        <option value="Wedding">Wedding</option>
                        <option value="Birthday">Birthday</option>
                        <option value="Baptism">Baptism</option>
                        <option value="Corporate">Corporate</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label">Event Address / Venue</label>
                    <input type="text" id="address" name="address" class="form-control" placeholder="Enter your event location" />
                </div>

                <label class="form-label">Special Request:</label>
                <textarea id="instructions" class="form-control" rows="3"></textarea>
            </div>
            <div class="modal-footer">
                <button class="btn btn-warning" id="confirmOrderBtn">Confirm Order</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="feedbackModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-3">
            <div class="modal-header">
                <h5 class="modal-title">We value your opinion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <label class="form-label">leave us a comment</label>
                <textarea id="feedbackComment" class="form-control" rows="4" placeholder="Your comments..."></textarea>
            </div>
            <div class="modal-footer">
                <button class="btn btn-warning" id="submitFeedbackBtn">Submit Feedback</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        document.querySelectorAll('.qty-input').forEach(input => {
            input.addEventListener('change', async (e) => {
                const qty = parseInt(e.target.value);
                const productId = e.target.getAttribute('data-product-id');

                if (isNaN(qty) || qty < 1) {
                    alert("⚠️ Quantity must be at least 1.");
                    e.target.value = 1;
                    return;
                }

                try {
                    const response = await fetch('/Cart/UpdateQuantity', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productId: parseInt(productId), quantity: qty })
                    });

                    const data = await response.json();

                    if (data.success) {
                        const row = e.target.closest('tr');
                        row.querySelector('td:nth-child(5)').innerText = "₱" + data.itemTotal.toFixed(2);

                        console.log("Cart total:", data.cartTotal);
                    } else {
                        alert("⚠️ " + data.message);
                    }
                } catch (error) {
                    console.error("Error updating quantity:", error);
                    alert("❌ Something went wrong. Please try again.");
                }
            });
        });

        $("#submitFeedbackBtn").click(() => {
            const message = $("#feedbackComment").val().trim();

            if (!message) {
                alert("Please enter your feedback before submitting.");
                return;
            }

            fetch("/Feedback/SubmitFeedback", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ message })
            })
            .then(async res => {
                if (!res.ok) {
                    const text = await res.text();
                    throw new Error(`Server error: ${text}`);
                }
                return res.json();
            })
            .then(data => {
                if (data.success) {
                    alert(data.message);
                    $("#feedbackModal").modal("hide");
                    $("#feedbackComment").val("");
                } else {
                    alert(data.message);
                }
            })
            .catch(err => console.error("Error submitting feedback:", err));
        });



        let unavailableDates = [];

        fetch("/Cart/GetUnavailableDates")
            .then(res => res.json())
            .then(dates => {
                unavailableDates = dates.map(d => d.split('T')[0]); // format: YYYY-MM-DD
                console.log("Unavailable Dates:", unavailableDates);

                // Initialize Flatpickr *after* data is ready
                flatpickr("#reservedDate", {
                    minDate: "today",
                    disable: unavailableDates,
                    dateFormat: "d/m/Y",
                    onChange: function (selectedDates, dateStr, instance) {
                        console.log("Date selected:", dateStr);
                    }
                });
            })
            .catch(err => console.error("Error fetching unavailable dates:", err));

		const dateInput = document.getElementById("reservedDate");
         
        dateInput.addEventListener("change", () => {
            const selectedDate = dateInput.value;
            console.log("Selected:", selectedDate);

            if (unavailableDates.includes(selectedDate)) {
                alert("❌ Selected date is unavailable.");
                dateInput.value = "";
            }
        });


        // Confirm order
        document.getElementById("confirmOrderBtn").addEventListener("click", async () => {
            const reservedDate = dateInput.value;
            const instructions = document.getElementById("instructions").value;
			const address = document.getElementById("address").value;
            const type = document.getElementById("type").value;

            console.log(reservedDate, instructions)
            if (!reservedDate) {
                alert("Please select a date.");
                return;
            }

            if(type == ""){
                 alert("Please select a type.");
                return;
            }

            try {
                const formData = new FormData();
                formData.append("reservedDate", reservedDate);
                formData.append("instructions", instructions);
                formData.append("address", address);
				formData.append("type", type);

                const response = await fetch("/Cart/ConfirmOrder", {
                    method: "POST",
                    body: formData
                });

                const data = await response.json();

                if (data.location) {
                    location.href = data.location;
                } else if (data.success) {
                    var confirmModalEl = bootstrap.Modal.getInstance(document.getElementById('confirmOrderModal'));
                    confirmModalEl.hide();

                    var feedbackModal = new bootstrap.Modal(document.getElementById('feedbackModal'));
                    feedbackModal.show();
                } else {
                    alert("⚠️ " + data.message);
                }
            } catch (err) {
                console.error(err);
                alert("❌ Something went wrong.");
            }
        });

        document.querySelectorAll(".remove-form").forEach(form => {
            form.addEventListener("submit", async e => {
                e.preventDefault();
                if (!confirm("Remove this item from your cart?")) return;

                const formData = new FormData(form);
                try {
                    const response = await fetch(form.action, {
                        method: "POST",
                        body: formData
                    });
                    const data = await response.json();
                    if (data.success) {
                        alert("✅ " + data.message);
                        location.reload();
                    } else {
                        alert("⚠️ " + data.message);
                    }
                } catch (error) {
                    console.error(error);
                    alert("❌ Something went wrong. Please try again.");
                }
            });
        });

        const clearForm = document.getElementById("clearCartForm");
        clearForm.addEventListener("submit", async e => {
            e.preventDefault();
            if (!confirm("Are you sure you want to clear your entire cart?")) return;

            try {
                const response = await fetch(clearForm.action, { method: "POST" });
                const data = await response.json();
                if (data.success) {
                    alert("✅ " + data.message);
                    location.reload();
                } else {
                    alert("⚠️ " + data.message);
                }
            } catch (error) {
                console.error(error);
                alert("❌ Something went wrong. Please try again.");
            }
        });
    </script>
}
